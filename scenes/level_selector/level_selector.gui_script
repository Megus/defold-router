-- Defold Router Demo Project
--
-- Â© 2016-2018 Roman "Megus" Petrov, Wise Hedgehog Studio.
-- https://wisehedgehog.studio, https://megus.org

local button = require("common.button")
local router = require("wh_router.router")
local transition = require("common.fade_transition")

local rid -- Router ID

local function set_state(self, state)
    if state then
        self.state = state
    else
        self.state = {world = 1, wins = 0, fails = 0}
    end
end

local function highlight_world(world)
	for i = 1,3 do
		local animation = (i == world) and "button-red" or "button"
		gui.play_flipbook(gui.get_node("world" .. i .. "/box"), animation)
		gui.play_flipbook(gui.get_node("world" .. i .. "/pressed"), animation)
	end
end

local function set_info(wins, fails)
	gui.set_text(gui.get_node("info/text"), "Wins: " .. wins .. ", Fails: " .. fails)
end


function on_message(self, message_id, message, _)
	if message_id == router.messages.scene_input then
		rid = message.router
		set_state(self, message.state)
        if message.input and message.input.win ~= nil then
            if message.input.win then
                self.state.wins = self.state.wins + 1
            else
                self.state.fails = self.state.fails + 1
            end
        end
        highlight_world(self.state.world)
        set_info(self.state.wins, self.state.fails)
	elseif message_id == router.messages.transition then
		transition(message_id, message)
	elseif message_id == router.messages.scene_popped then
		msg.post(".", "acquire_input_focus")
    end
end

function on_input(self, action_id, action)
	button("back", action_id, action, function()
		router.close(rid, nil, self.state)
	end)

	button("settings", action_id, action, function()
        msg.post(".", "release_input_focus")
        router.popup(rid, "settings")
	end)

	for i = 1,3 do
		button("world" .. i, action_id, action, function()
	        self.state.world = i
	        highlight_world(i)
		end)
	end

	for i = 1,3 do
		button("level" .. i, action_id, action, function()
	        router.close(rid, {world = self.state.world, level = i}, self.state)
		end)
	end
end
